openapi: 3.0.3
info:
  title: Swagger ValuedIn - OpenAPI 3.0
  description: Software Architecture course - Restful API design by JMNTS22 student group.
  contact:
    email: jmnts22@gmail.com
  version: 1.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/iramasauskas/ValuedIn/1.0.0
  - url: https://valuedin.swagger.io/api/v3
tags:
  - name: Authentication
    description: Operations to manage user authentication
  - name: Users
    description: Operations to manage users
  - name: Organizations
    description: Operations to manage organizations
  - name: Values
    description: Operations to manage values
  - name: Jobs
    description: Operations to manage jobs
  - name: Chats
    description: Operations to manage chats
  - name: Feed
    description: Operations to manage feed
  - name: Web Sockets
    description: Operations to manage web socket connections
paths:
  /auth:
    get:
      tags:
      - Authentication
      summary: Check authentication
      description: Check authentication
      operationId: checkAuth
      responses:
        '200':
          description: Success
        '404':
          description: Incorrect data provided
          
    post:
      tags:
      - Authentication
      summary: Login by user
      description: Log in by user
      operationId: logINUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AuthRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        description: Log in request
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /auth/register:       
    post:
      tags:
      - Authentication
      summary: Register User account
      description: Register User account
      operationId: regUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewUser'

          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewUser'
        description: Created user object
        required: true

      responses:
        '200':
          description: Success 

          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:

                $ref: '#/components/schemas/NewUser'
            application/xml:
              schema:
                $ref: '#/components/schemas/NewUser'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/NewUser'  
        '404':
          description: Incorrect data provided      

  /auth/passwordreset:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset the password for the user
      operationId: resetPass
      responses:
        '200':
          description: Success
        '407':
          description: Not logged in
      security:
      - valuedIn_auth:
          - write:users  
          - read:users

  /auth/passwordchange:
    post:
      tags:
        - Authentication
      summary: Change password 
      description: This can only be done by the logged in user.
      operationId: changePass 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPassword'
          application/xml:
            schema:
              $ref: '#/components/schemas/NewPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NewPassword'
        description: Created user object
        required: true
      responses:
        '200':
          description: Success
        '400':
          description: Incorrect data provided
        '401':
          description: Not logged in
      security:
      - valuedIn_auth:
          - write:users  
          - read:users
          
# User management
          
  /users:
    get:
      tags:
      - Users
      summary: List all Users
      description: This can only be done by the logged system admin.
      operationId: listUsers
      parameters:
      - name: pageToken
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSystemInfoPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserSystemInfoPage'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/UserSystemInfoPage'  
        '403':
          description: Unauthenticated user
      security:
      - valuedIn_auth:
          - read:users  
                
  /users/feed:
    get:
      tags:
        - Users
      summary: List all Feed elements of Users
      description: This can only be done by the logged in user.
      operationId: listFeedUsers
      parameters:
      - name: feedToken
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFeedInfoPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserFeedInfoPage'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/UserFeedInfoPage'  
        '403':
          description: Unauthenticated user
      security:
      - valuedIn_auth:
          - read:users  
               
  /users/{id}:
    get:
      tags:
      - Users
      summary: View User
      description: This can only be done by system admin.
      operationId: viewUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSystemInfo"
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
      security:
        - api_key: []
        - valuedIn_auth:
            - 'write:users'
            - 'read:users'          
 
    put:
      tags:
      - Users
      summary: Update User
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdatedUser"
        required: true        
      responses:
        '200':
          description: Success
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
      security:
        - api_key: []
        - valuedIn_auth:
            - 'write:users'
            - 'read:users'  
    delete:
      tags:
        - Users
      summary: Expire User
      description: Expire User by ID
      operationId: expireUser
      parameters:
      - name: id
        in: path
        description: ID of user to expire
        required: true
        schema:
          type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found 

  /users/{id}/cv:
    post:
      tags:
        - Users
      summary: Upload CV for User
      description: This can only be done by the logged in user.
      operationId: uploadCV
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - valuedIn_auth:
            - write:users
            - read:users    
            
# Organizations management
          
  /organizations:
    get:

      tags:
        - Organizations
      summary: List all Organizations
      description: List all Organizations
      operationId: listOrg
      parameters:
      - name: pageToken
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSystemInfoPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/OrgSystemInfoPage'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/OrgSystemInfoPage'  
        '403':
          description: Unauthenticated user
      security:
      - valuedIn_auth:
          - read:organizations   
    
    post:
      tags:
        - Organizations
      summary: Add a new organization to the social network
      description: Add a new organization to the social network
      operationId: createOrg
      requestBody:
        description: Create a new organization in the social network
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrganization'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewOrganization'
        '404':
          description: Incorrect data provided    
        
  /organizations/feed:
    get:
      tags:
        - Organizations
      summary: List all Feed elements of Organizations
      description: List all Feed elements of Organizations
      operationId: listFeedOrg
      parameters:
      - name: feedToken
        in: query

        required: true
        schema:
          type: string
      responses:
        '200':

          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgFeedInfoPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/OrgFeedInfoPage'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/OrgFeedInfoPage'  
        '403':
          description: Unauthenticated user
      security:
      - valuedIn_auth:
          - read:users
            
  /organizations/{id}:
    get:
      tags:
        - Organizations
      summary: Find organization by ID
      description: Returns a single organization
      operationId: viewOrg
      parameters:
        - name: id
          in: path
          description: ID of organization to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSystemInfo'
        '400':
          description: Invalid ID supplied
        '404':
          description: Organization not found
      security:
        - api_key: []
        - valuedIn_auth:
            - 'write:organizations'
            - 'read:organizations'
    put:
      tags:
        - Organizations
      summary: Update Organization
      description: Update an existing organization by Id
      operationId: updateOrg
      parameters:
        - name: id
          in: path
          description: ID of organization to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent organization in social network 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrgSystemInfo'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSystemInfo'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Organization not found
      security:
        - api_key: []
        - valuedIn_auth:
            - 'write:organizations'
            - 'read:organizations'  
    delete:
      tags:
        - Organizations
      summary: Archive Organization
      description: Archive an existent organization in social
      operationId: archiveOrg
      parameters:
        - name: id
          in: path
          description: ID of organization to archive
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Organization not found 

  /organizations/{id}/employees:
    get:
      tags:
        - Organizations
      summary: List all Organization Employees
      description: List all Organization Employees
      operationId: listOrgEmp
      parameters:
        - name: id
          in: path
          description: ID of organization to return employees
          required: true
          schema:
            type: integer
            format: int64
        - name: pageToken
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeInfoPage'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Organization not found
      security:
        - api_key: []
        - valuedIn_auth:
            - write:organizations
            - read:organizations
            - read:employees
    
  /organizations/{id}/valuehistory:
    post:
      tags:
        - Organizations
      summary: View Organization Value history
      description: This can only be done by the logged in user.
      operationId: viewValueHis
      parameters:
        - name: id
          in: path
          description: ID of organization to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Provide required page number and filter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaginatedDataRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrgSystemInfo'
        '403':
          description: Unauthenticated user
        '404':
          description: Incorrect data provided
      security:
        - valuedIn_auth:
            - write:organizations
            - read:organizations

  /organizations/{id}/jobs:
    get:
      tags:
        - Organizations
      summary: View Organization Jobs
      description: View Organization Jobs
      operationId: viewOrgJob
      parameters:
        - name: id
          in: path
          description: ID of organization to return open job positions
          required: true
          schema:
            type: integer
            format: int64
        - name: pageToken
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobInfoPage'        
        '400':
          description: Invalid ID supplied
        '404':
          description: Organization not found
      security:
        - valuedIn_auth:
            - write:organizations
            - read:organizations
            - read:jobs
            
  /organizations/request:
    post:
      tags:
        - Organizations
      summary: Request new Company Registration
      description: Request new Company Registration
      operationId: requestReg
      responses:
        '200':
          description: Successful operation
      security:
        - valuedIn_auth:
            - write:organizations
            - read:organizations  
      
# Value management

  /values:
    get:
      tags:
        - Values
      summary: List all Values
      description: List all existing values
      operationId: listValues
      parameters:
      - name: pageToken
        in: query
        required: true
        schema:
          type: string

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValueInfoPage'
        '403':
          description: Unauthenticated user
      security:
        - valuedIn_auth:
            - read:values  
    put:
      tags:
        - Values
      summary: Update Value
      description: Update an existent value in social network
      operationId: updateValues
      parameters:
        - name: name
          in: query
          description: Name to filter by
          required: false
          explode: true
          schema:
              type: string
      requestBody:
        description: Update an existent value in social network 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Value'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'          
        '400':
          description: Invalid name supplied
        '404':
          description: Value not found
      security:
        - valuedIn_auth:
            - write:values
            - read:values  
    post:
      tags:
        - Values
      summary: Create new Value for Sys Admin
      description: This can only be done by system admin.
      operationId: sysCreateValue
      requestBody:
        description: Create a new value in the social network
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Value'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Value'
        '403':
          description: Unauthenticated user
        '404':
          description: Incorrect data provided
      security:
        - valuedIn_auth:
            - write:values
            - read:values 
            
    delete:
      tags:
        - Values
      summary: Archive Value
      description: This can only be done by the System Admin.
      operationId: archValue
      parameters:
        - name: name
          in: query
          description: Name to filter by
          required: true
          explode: true
          schema:
              type: string
      responses:
        '400':
          description: Invalid name supplied
        '404':
          description: Value not found
            
# Job management

  /jobs:
    get:
      tags:
        - Jobs
      summary: List all Jobs
      description: List all existing jobs
      operationId: listJobs
      parameters:
      - name: pageToken
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobSystemInfoPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/JobSystemInfoPage'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/JobSystemInfoPage'  
        '403':
          description: Unauthenticated user
      security:
      - valuedIn_auth:
          - read:jobs 

  /jobs/feed:
    get:
      tags:
        - Jobs
      summary: List all Feed elements of Jobs
      description: This can only be done by the logged in user.
      operationId: listFeedJobs
      parameters:
      - name: feedToken
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobInfoPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/JobInfoPage'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/JobInfoPage'  
        '403':
          description: Unauthenticated user
      security:
      - valuedIn_auth:
          - read:jobs 
  
  /jobs/{id}:
    post:
      tags:
        - Jobs
      summary: Create new Job
      description: This can only be done by HR role.
      operationId: createJob
      parameters:
        - name: id
          in: path
          description: ID of organization where job will be created
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Create a new job in the social network
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'          
        '400':
          description: Invalid ID supplied
      security:
        - valuedIn_auth:
            - write:jobs
            - read:jobs
    get:
      tags:
        - Jobs
      summary: View Job
      description: This can only be done by the logged in user.
      operationId: viewJob
      parameters:
        - name: id
          in: path
          description: ID of job to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Invalid ID supplied
        '404':
          description: Job not found
      security:
        - api_key: []
        - valuedIn_auth:
            - 'write:jobs'
            - 'read:jobs'
    put:
      tags:
        - Jobs
      summary: Update Job
      description: This can only be done by HR role.
      operationId: updateJob
      parameters:
        - name: id
          in: path
          description: ID of job to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent job in social network 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Invalid ID supplied
        '404':
          description: Job not found
      security:
        - valuedIn_auth:
            - write:jobs
            - read:jobs

    delete:
      tags:
        - Jobs
      summary: Archive Job
      description: This can only be done by the logged in user.
      operationId: archJob
      parameters:
        - name: id
          in: path
          description: ID of job to archive
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Organization not found  


  /jobs/{id}/applications:
    get:
      tags:
        - Jobs
      summary: View applicants to Job
      description: This can only be done by the logged in user.
      operationId: viewAppJob
      parameters:
        - name: id
          in: path
          description: ID of job to return applicants

          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppInfoPage'
        '400':
          description: Invalid ID supplied
        '404':
          description: Applicant not found
      security:
        - valuedIn_auth:
            - read:applicants  
            
    post:
      tags:
        - Jobs
      summary: Apply to Job
      description: This can only be done by the logged in user.
      operationId: applyJob
      parameters:
        - name: id
          in: path
          description: ID of job to to apply to
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Job not found
      security:
        - valuedIn_auth:
            - write:jobs
            - read:jobs  

  /jobs/bookmarks:
    get:
      tags:
        - Jobs
      summary: View bookmarked Jobs
      description: This can only be done by the logged in user.
      operationId: viewBookJob
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobInfoPage'
        '400':
          description: Invalid ID supplied
        '404':
          description: Applicant not found
      security:
        - valuedIn_auth:
            - read:jobs  

  /jobs/bookmarks/{id}:
    post:
      tags:
        - Jobs
      summary: Bookmark Job
      description: This can only be done by the logged in user.
      operationId: bookJob
      parameters:
        - name: id
          in: path
          description: ID of job to bookmark
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Invalid ID supplied
        '404':
          description: Job not found
      security:
        - valuedIn_auth:
            - write:jobs
            - read:jobs  
            
    delete:
      tags:
        - Jobs
      summary: Un-bookmark Job
      description: This can only be done by the logged in user.
      operationId: unbookJob
      parameters:
        - name: id
          in: path
          description: ID of job to un-bookmark
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '400':
          description: Invalid ID supplied
        '404':
          description: Job was not found
      security:
        - valuedIn_auth:
            - write:jobs
            - read:jobs 

  
# Web Socket management

  /ws:
    get:
      tags:
        - Web Sockets
      summary: Establish Web Socket
      description: Establish Web Socket
      operationId: webSocket
      responses:
        '200':
          description: Success  
        '402':
          description: Expired token
        '403':
          description: Unauthenticated user
  /ws/token:
    get:
      tags:
        - Web Sockets
      summary: Provides a web socket token
      description: Provides a token for the user to establish a web socket
      operationId: webSocketToekn
      responses:
        '200':
          description: Success  
        '403':
          description: Unauthenticated user
# Chat management
  /chats:
    get:
      tags:
        - Chats
      summary: List all Chats
      description: This can only be done by the logged in user.
      operationId: listChats
      parameters:
      - name: pageToken
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ChatInfoPage'
            application/json:
              schema:
                $ref: '#/components/schemas/ChatInfoPage'
            text/json:
              schema:
                $ref: '#/components/schemas/ChatInfoPage'
      security:
        - valuedIn_auth:
            - write:chats
            - read:chats 
    post:
      tags:
        - Chats
      summary: Create Chat
      description: This can only be done by the logged in user.
      operationId: createChat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewChatRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/NewChatRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/NewChatRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Chat'
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
            text/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '403':
          description: Unauthenticated user
        '404':
          description: Chat not found
      security:
        - valuedIn_auth:
            - write:chats
            - read:chats 
  /chats/{id}:
    get:
      tags:
        - Chats
      summary: View Chat
      description: This can only be done by the logged in user.
      operationId: viewChat
      parameters:
        - name: id
          in: path
          description: ID of chat to return
          required: true
          schema:
            type: integer
            format: int64
        - name: pageToken
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageDTODateTimeOffsetPage'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDTODateTimeOffsetPage'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageDTODateTimeOffsetPage'
    post:
      tags:
        - Chats
      summary: Create a Message in Chat
      description: This can only be done by the logged in user.
      operationId: createMsg
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Provide message content
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
          text/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
          application/*+json:
            schema:
              $ref: '#/components/schemas/NewMessage'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ChatMessage'
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
            text/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
                  
        '403':
          description: Unauthenticated user
        '404':
          description: Incorrect data provided
      security:
        - valuedIn_auth:
            - write:messages
            - read:messages
                

          
# Feed management

  /feed:
    get:
      tags:
        - Feed
      summary: List all Feed elements
      description: This can only be done by the logged in user.
      operationId: listFeed
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedInfoPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/FeedInfoPage'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/FeedInfoPage'
        '403':
          description: Unauthenticated user
      security:
        - valuedIn_auth:
            - read:feeds  

components:
  schemas:
    NewUser:
      type: object
      properties:
        login:
          type: string
          nullable: false
        role:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: false
        lastName:
          type: string
          nullable: false
        password:
          type: string
          nullable: false
        email:
          type: string
          nullable: false
        telephone:
          type: string
          nullable: false
      additionalProperties: false
    NewPassword:
      type: object
      properties:
        oldPassword:
          type: string
          nullable: true
        newPassword:
          type: string
          nullable: false

    UpdatedUser:
      type: object
      properties:
        userID:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        role:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        telephone:
          type: string
          nullable: true
      additionalProperties: false
    UserSystemInfo:
      type: object
      properties:
        login:
          type: string
          nullable: true
        userID:
          type: string
          nullable: true
        isExpired:
          type: boolean
        lastActive:
          type: string
          format: date-time
          nullable: true
        role:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        telephone:
          type: string
          nullable: true
      additionalProperties: false  
    UserFeedInfo:
      type: object
      properties:
        userFirstName:
          type: string
          nullable: true
        userLastName:
          type: string
          nullable: true
        userPosition:
          type: string
          nullable: true
        userMatch:
          type: number
          nullable: true
        userValues:
          type: array
          items:
            type: string  
      additionalProperties: false  
    UserSystemInfoPage:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/UserSystemInfo"
          nullable: true
        total:
          type: integer
          format: int32
        pageNo:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false  
      
    UserFeedInfoPage:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/UserFeedInfo"
          nullable: true
        total:
          type: integer
          format: int32
        pageNo:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false  
    NewOrganization:
      type: object
      properties:
        login:
          type: string
          nullable: true
        title:
          type: string
        password:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        telephone:
          type: string
          nullable: true
      additionalProperties: false  
    OrgSystemInfoPage:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/OrgSystemInfo"
          nullable: true
        total:
          type: integer
          format: int32
        pageNo:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false   
    OrgFeedInfoPage:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/OrgFeedInfo"
          nullable: true
        total:
          type: integer
          format: int32
        pageNo:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false  
    OrgSystemInfo:
      required:
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        banner:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: banner  
        title:          
          type: string
          example: BarberShop
        city:
          type: string
          example: Bakersfield, CA
        values:
          type: array
          items:
           type: string
           example: Honesty, Communication, Extrovert, Artistic
        match:
          type: integer
          format: int64
          example: 12
        description:
          type: string
          example: Classic Barbershop for Your needs
        owner:
          type: string
          example: James Kameron
        positions:
          type: string
          example: Barber
        employeeValues:
          type: array
          items:
           type: string
           example: Extrovert, Honest, Forth-coming
      xml:
        name: organization  
    OrgFeedInfo:
      required:
        - title
      type: object
      properties:
        organizationBanner:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: banner  
        organizationTitle:          
          type: string
          example: BarberShop
        organizationDescription:
          type: string
          example: Classic Barbershop for Your needs
      xml:
        name: organization  
    EmployeeInfoPage:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/Employee"
          nullable: true
        total:
          type: integer
          format: int32
        pageNo:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false  
    Employee:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: Jack Black
        position:
          type: string
          example: Finance specialist
        organization:
          type: string
          example: SwedBank  
    JobSystemInfoPage:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/JobSysInfo"
          nullable: true
        total:
          type: integer
          format: int32
        pageNo:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false 
    JobSysInfo:
      required:
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        avatar:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: avatar  
        title:
          type: string
          example: Barber in BarberShop
        position:
          type: string
          example: Barber
        location:
          type: string
          example: Bakersfield, CA
        job description:
          type: string
          example: BarberShop provides a wide array of men's haircuts and styles for a diverse clientele.
        values:
          type: string
          example: Openness, Extrovert, Empathic, Social
        match:
          type: integer
          format: int64
          example: 54
      xml:
        name: job
    Job:
      required:
        - title
      type: object
      properties:
        jobAvatar:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: avatar  
        jobTitle:
          type: string
          example: Barber in BarberShop
        jobTags:
          type: array
          items:
           type: string
           example: Barber, fulltime
        jobValues:
          type: array
          items:
           type: string
          example: Openness, Extrovert, Empathic, Social
        jobMatch:
          type: integer
          format: int64
          example: 54
      xml:
        name: job  
    JobInfoPage:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/Job"
          nullable: true
        total:
          type: integer
          format: int32
        pageNo:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false 
    AppInfoPage:

      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/Applicant"
          nullable: true
        total:
          type: integer
          format: int32
        pageNo:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false  
    Applicant:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: Jack Black
        education:
          type: string
          example: Klaipeda University
    ValueInfoPage:
      type: object
      properties:
        results:
          type: array
          items:
            "$ref": "#/components/schemas/ValuesInfo"
          nullable: true
        total:
          type: integer
          format: int32
        pageNo:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false     
    ValuesInfo:
       type: string
    Value:
      type: object
      properties:
        name:
          type: string
          nullable: true   
    Chat:
      required:
        - messages
        - participants
      type: object
      properties:
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        id:
          type: integer
          format: int64
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessage'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/ChatParticipant'
      additionalProperties: false
      xml:
        name: chat
    ChatInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        chatName:
          type: string
          nullable: true
        participatingUsers:
          type: array
          items:
            type: string
          nullable: true
        lastMessage:
          type: string
          format: date-time
        lastMessageContent:
          type: string
          nullable: true
        unread:
          type: boolean
      additionalProperties: false
    ChatInfoPage:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/ChatInfo'
          nullable: true
        nextOffset:
          type: string
          format: date-time
        last:
          type: boolean
      additionalProperties: false
    ChatMessage:
      required:
        - chatId
        - message
      type: object
      properties:
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        id:
          type: integer
          format: int64
        chatId:
          type: integer
          format: int64
        message:
          minLength: 1
          type: string
      additionalProperties: false
    ChatParticipant:
      required:
        - chatId
      type: object
      properties:
        createdOn:
          type: string
          format: date-time
        createdBy:
          type: string
          nullable: true
        updatedOn:
          type: string
          format: date-time
          nullable: true
        updatedBy:
          type: string
          nullable: true
        userId:
          maxLength: 128
          type: string
          nullable: true
        chatId:
          type: integer
          format: int64
        chat:
          $ref: '#/components/schemas/Chat'
      additionalProperties: false
    MessageDTO:
      required:
        - content
        - id
        - sent
        - sentByFirstName
        - sentByLastName
      type: object
      properties:
        id:
          type: integer
          format: int64
        sentByFirstName:
          minLength: 1
          type: string
        sentByLastName:
          minLength: 1
          type: string
        content:
          minLength: 1
          type: string
        sent:
          type: string
          format: date-time
        unread:
          type: boolean
      additionalProperties: false
    MessageDTODateTimeOffsetPage:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/MessageDTO'
          nullable: true
        nextOffset:
          type: string
          format: date-time
        last:
          type: boolean
      additionalProperties: false
    NewChatRequest:
      type: object
      properties:
        participants:
          type: array
          items:
            type: string
          nullable: true
        messageContent:
          type: string
          nullable: true
      additionalProperties: false
    NewMessage:
      type: object
      properties:
        content:
          type: string
          nullable: true
      additionalProperties: false
    FeedInfoPage:
      type: object
      properties:

        results:
          type: array
          items:
            "$ref": "#/components/schemas/Feed"
          nullable: true
        total:
          type: integer
          format: int32
        pageNo:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false     
    Feed:
     type: object
     properties:
        results:
          allOf:
           - $ref: "#/components/schemas/UserFeedInfo"
           - $ref: "#/components/schemas/Job"
           - $ref: "#/components/schemas/OrgFeedInfo"
          nullable: true
    PaginatedDataRequest:
      required:
          - page
          - filter
      type: object
      properties:
        page:          
          type: object
          example: 3
        filter:
          type: string
          example: "ColumnName = 'Example Filter Text'"   
    AuthRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
        rememberMe:
          type: boolean
          nullable: true
      additionalProperties: false   
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'       
  securitySchemes:
    valuedIn_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://valuedin.com/auth
          scopes:
            write:messages: modify messages
            read:messages: read messages
            read:feeds: read feeds
            write:chats: modify chats
            read:chats: read chats
            write:applicants: modify applicants
            read:applicants: read applicants
            write:jobs: modify jobs
            read:jobs: read jobs
            write:values: modify values
            read:values: read values
            write:organizations: modify organizations
            read:organizations: read organizations
            write:users: modify users
            read:users: read users
    api_key:
      type: apiKey
      name: jwt_token
      in: header
